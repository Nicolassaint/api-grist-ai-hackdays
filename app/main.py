import warnings
# Suppression des warnings Pydantic V2 et autres warnings de compatibilit√©
warnings.filterwarnings("ignore", message="Valid config keys have changed in V2")
warnings.filterwarnings("ignore", category=UserWarning, module="pydantic")

from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.exceptions import RequestValidationError
from contextlib import asynccontextmanager
from typing import List, Dict, Any
import uuid
import json
from dotenv import load_dotenv

from .models.request import GristRequest, ProcessedRequest, ChatResponse
from .orchestrator import AIOrchestrator
from .utils.logging import AgentLogger

# Chargement des variables d'environnement
load_dotenv()

# Initialisation de l'orchestrateur et logger globaux
orchestrator = None
logger = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gestionnaire du cycle de vie de l'application"""
    global orchestrator, logger
    
    # D√©marrage
    orchestrator = AIOrchestrator()
    logger = AgentLogger("main_api")
    logger.info("D√©marrage de l'API Widget IA Grist")
    
    yield
    
    # Arr√™t
    logger.info("Arr√™t de l'API Widget IA Grist")

# Initialisation de l'application FastAPI avec lifespan
app = FastAPI(
    title="API Widget IA Grist",
    description="Backend FastAPI pour un widget IA int√©gr√© √† Grist, capable de traiter des requ√™tes en langage naturel via des agents IA sp√©cialis√©s.",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan
)

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:5173",  # Vite dev server
        "http://127.0.0.1:5173",  # Alternative localhost
        "https://docs.getgrist.com",  # Grist officiel
        "*"  # Temporaire pour d√©veloppement - √† restreindre en production
    ],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)


@app.get("/")
async def root():
    """Endpoint racine avec informations sur l'API"""
    return {
        "message": "API Widget IA Grist",
        "version": "1.0.0",
        "status": "running",
        "endpoints": {
            "chat": "/chat",
            "health": "/health",
            "stats": "/stats",
            "docs": "/docs"
        }
    }


# Gestionnaire d'erreur pour les erreurs de validation
@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    """Gestionnaire personnalis√© pour les erreurs de validation"""
    request_id = str(uuid.uuid4())
    
    # Log des d√©tails de l'erreur de validation
    logger.error(
        "Erreur de validation de requ√™te",
        request_id=request_id,
        method=request.method,
        url=str(request.url),
        validation_errors=exc.errors(),
        raw_body=await get_raw_body(request)
    )
    
    return {
        "detail": "Erreur de validation des donn√©es",
        "errors": exc.errors(),
        "request_id": request_id
    }


async def get_raw_body(request: Request) -> str:
    """R√©cup√®re le corps brut de la requ√™te pour debug"""
    try:
        body = await request.body()
        return body.decode('utf-8') if body else "Corps vide"
    except Exception as e:
        return f"Erreur lecture corps: {str(e)}"


@app.post("/chat", response_model=ChatResponse)
async def chat_endpoint(request: Request):
    """
    Endpoint principal pour traiter les requ√™tes conversationnelles
    
    Args:
        request: Requ√™te HTTP brute pour debug
        
    Returns:
        ChatResponse: R√©ponse structur√©e avec le r√©sultat du traitement
    """
    request_id = str(uuid.uuid4())
    
    try:
        # Lecture du corps brut pour debug
        raw_body = await request.body()
        logger.info(
            "Requ√™te /chat - Corps brut re√ßu",
            request_id=request_id,
            raw_body_length=len(raw_body),
            raw_body_complete=raw_body.decode('utf-8')  # Affichage complet pour debug
        )
        
        # Parsing JSON manuel pour debug
        try:
            json_data = json.loads(raw_body.decode('utf-8'))
            logger.info(
                "Parsing JSON r√©ussi",
                request_id=request_id,
                json_type=type(json_data).__name__,
                json_keys=list(json_data.keys()) if isinstance(json_data, dict) else "N/A",
                json_length=len(json_data) if isinstance(json_data, (list, dict)) else "N/A"
            )
        except json.JSONDecodeError as e:
            logger.error(
                "Erreur parsing JSON",
                request_id=request_id,
                json_error=str(e)
            )
            raise HTTPException(
                status_code=400,
                detail=f"JSON invalide: {str(e)}"
            )
        
        # Construction de la requ√™te Grist √† partir des √©l√©ments HTTP
        try:
            # R√©cup√©ration des headers HTTP
            headers_dict = dict(request.headers)
            
            # R√©cup√©ration des param√®tres de query
            query_params = dict(request.query_params)
            
            # Le JSON re√ßu est trait√© comme le body
            grist_request_data = {
                "headers": headers_dict,
                "params": {},  # Pas de params dans le path pour ce endpoint
                "query": query_params,
                "body": json_data  # Le JSON re√ßu devient le body
            }
            
            # Validation Pydantic avec la structure compl√®te
            grist_request = GristRequest(**grist_request_data)
                
            logger.info(
                "Construction requ√™te Grist r√©ussie",
                request_id=request_id,
                headers_count=len(headers_dict),
                query_params_count=len(query_params),
                body_keys=list(json_data.keys()) if isinstance(json_data, dict) else "N/A"
            )
            
        except Exception as e:
            logger.error(
                "Erreur construction requ√™te Grist",
                request_id=request_id,
                construction_error=str(e),
                json_data_keys=list(json_data.keys()) if isinstance(json_data, dict) else "N/A"
            )
            raise HTTPException(
                status_code=422,
                detail=f"Erreur construction requ√™te: {str(e)}"
            )
        
        # Validation de la requ√™te
        if not grist_request:
            raise HTTPException(
                status_code=400, 
                detail="Requ√™te Grist invalide"
            )
        
        logger.info(
            "Nouvelle requ√™te /chat valid√©e",
            request_id=request_id,
            document_id=grist_request.body.documentId,
            execution_mode=grist_request.body.executionMode,
            nb_messages=len(grist_request.body.messages)
        )
        
        # Extraction de la cl√© API Grist depuis le header x-api-key
        grist_api_key = grist_request.headers.get("x-api-key")
        
        # Conversion vers le format interne
        processed_request = ProcessedRequest.from_grist_request(
            grist_request, 
            grist_api_key
        )
        
        # Traitement par l'orchestrateur
        response = await orchestrator.process_chat_request(processed_request)
        
        # Logs d√©taill√©s du r√©sultat final
        logger.info(
            "üîç R√©sultat final du traitement",
            request_id=request_id,
            agent_used=response.agent_used,
            response_length=len(response.response),
            response_preview=response.response[:200] + "..." if len(response.response) > 200 else response.response,
            sql_query=response.sql_query,
            data_analyzed=response.data_analyzed,
            has_error=response.error is not None
        )
        
        if response.sql_query:
            logger.info(
                "üìä Requ√™te SQL g√©n√©r√©e",
                request_id=request_id,
                sql_query=response.sql_query
            )
        
        if response.error:
            logger.warning(
                "‚ö†Ô∏è Erreur dans la r√©ponse",
                request_id=request_id,
                error=response.error
            )
        
        logger.info(
            "Requ√™te /chat trait√©e avec succ√®s",
            request_id=request_id,
            agent_used=response.agent_used,
            response_length=len(response.response)
        )
        
        return response
        
    except HTTPException:
        # Re-raise les HTTPException
        raise
        
    except Exception as e:
        logger.error(
            f"Erreur lors du traitement /chat: {str(e)}",
            request_id=request_id
        )
        
        # Retour d'une r√©ponse d'erreur mais pas d'exception HTTP
        # pour √©viter de casser l'int√©gration Grist
        return ChatResponse(
            response=f"D√©sol√©, j'ai rencontr√© une erreur technique : {str(e)}",
            agent_used="error",
            error=str(e)
        )


@app.get("/health")
async def health_check():
    """
    Endpoint de v√©rification de l'√©tat de sant√© de l'API
    
    Returns:
        Dict: Statut de sant√© des composants
    """
    try:
        health_status = await orchestrator.health_check()
        
        # D√©termination du code de statut HTTP
        status_code = 200
        if health_status["status"] == "degraded":
            status_code = 206  # Partial Content
        elif health_status["status"] == "unhealthy":
            status_code = 503  # Service Unavailable
            
        return health_status
        
    except Exception as e:
        logger.error(f"Erreur lors du health check: {str(e)}")
        return {
            "status": "unhealthy",
            "error": str(e),
            "components": {}
        }


@app.get("/stats")
async def get_stats():
    """
    Endpoint pour r√©cup√©rer les statistiques d'utilisation
    
    Returns:
        Dict: Statistiques d'utilisation des agents
    """
    try:
        stats = orchestrator.get_stats()
        return {
            "status": "success",
            "data": stats
        }
        
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration des stats: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Erreur lors de la r√©cup√©ration des statistiques: {str(e)}"
        )


@app.get("/agents")
async def list_agents():
    """
    Endpoint pour lister les agents disponibles et leurs capacit√©s
    
    Returns:
        Dict: Liste des agents et leurs descriptions
    """
    agents_info = {
        "generic": {
            "name": "Agent G√©n√©rique",
            "description": "R√©pond aux questions g√©n√©rales et fait du petit talk",
            "capabilities": [
                "Salutations et conversations g√©n√©rales",
                "Aide sur l'utilisation du widget",
                "Guidance vers les bonnes questions"
            ]
        },
        "sql": {
            "name": "Agent SQL", 
            "description": "G√©n√®re des requ√™tes SQL √† partir de langage naturel",
            "capabilities": [
                "G√©n√©ration de requ√™tes SELECT",
                "Extraction de donn√©es depuis Grist",
                "Validation de s√©curit√© des requ√™tes"
            ]
        },
        "analysis": {
            "name": "Agent d'Analyse",
            "description": "Analyse les donn√©es et fournit des insights",
            "capabilities": [
                "Analyse de tendances",
                "R√©sum√©s statistiques",
                "Recommandations bas√©es sur les donn√©es"
            ]
        },
        "router": {
            "name": "Agent de Routing",
            "description": "Dirige les messages vers l'agent appropri√©",
            "capabilities": [
                "Classification automatique des requ√™tes",
                "Optimisation du routage",
                "Gestion du contexte conversationnel"
            ]
        }
    }
    
    return {
        "status": "success",
        "agents": agents_info,
        "routing_logic": "Automatique bas√© sur l'analyse du contenu du message"
    }


# Middleware pour logging des requ√™tes
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """Middleware pour logger toutes les requ√™tes HTTP"""
    
    # G√©n√©ration d'un ID de requ√™te
    request_id = str(uuid.uuid4())
    
    # Log de la requ√™te entrante
    logger.info(
        "Requ√™te HTTP entrante",
        request_id=request_id,
        method=request.method,
        url=str(request.url),
        client_ip=request.client.host if request.client else "unknown"
    )
    
    # Traitement de la requ√™te
    response = await call_next(request)
    
    # Log de la r√©ponse
    logger.info(
        "R√©ponse HTTP sortante",
        request_id=request_id,
        status_code=response.status_code
    )
    
    return response


if __name__ == "__main__":
    import uvicorn
    import os
    
    port = int(os.getenv("PORT", 8000))  # Port depuis .env ou 8000 par d√©faut
    
    # Mode d√©veloppement vs production
    is_dev = os.getenv("ENV", "development") == "development"
    
    uvicorn_config = {
        "host": "0.0.0.0",
        "port": port,
        "log_level": "info"
    }
    
    # Configuration sp√©cifique au d√©veloppement
    if is_dev:
        uvicorn_config.update({
            "reload": True,
            "reload_excludes": [
                "*.log",
                "*.pid", 
                "__pycache__",
                "*.pyc",
                ".git",
                "node_modules"
            ]
        })
    
    uvicorn.run("app.main:app", **uvicorn_config) 